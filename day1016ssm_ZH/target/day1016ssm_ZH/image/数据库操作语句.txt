USE DAY 15;
-- 数据约束
SELECT * FROM test;
DROP TABLE test;
-- 1.1 默认值约束(default)
-- 需求：在不添加gender的时候，有一个默认值‘男’
CREATE TABLE test(
	NAME VARCHAR(20),
	gender VARCHAR(2) DEFAULT '男'
);
INSERT INTO test(NAME) VALUES('张三')
-- 1.2 非空约束(not null)
-- 需求：name字段一定要有值
CREATE TABLE test(
	NAME VARCHAR(20) NOT NULL,
	gender VARCHAR(2) DEFAULT '男'
);
-- 非空约束，不能不插入值，不能为null
INSERT INTO test(gender) VALUES('男');
-- 1.3 唯一约束(unique) 可以插入多个null  
CREATE TABLE test(
	id INT UNIQUE,
	NAME VARCHAR(20) NOT NULL,
	gender VARCHAR(2) DEFAULT '男'
);
-- 需求：id的值不能重复
INSERT INTO test VALUES (1,'战三','nv');

-- 1.4 主键约束（唯一+非空）(primary key)
-- 注意：通常情况下，会给每张表设置一个主键字段，唯一性
CREATE TABLE test(
	id INT PRIMARY KEY,
	NAME VARCHAR(20) NOT NULL,
	gender VARCHAR(2) DEFAULT '男'
);

-- 1.5 自增长约束(auto_increment) 初始值为0，每次递增1
-- 不需要手动添加自增长的值
CREATE TABLE test(
	id INT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(20) NOT NULL,
	gender VARCHAR(2) DEFAULT '男'
);

-- 1.6 外键约束（约束两张表）
-- foreign key
-- 外键约束在什么时候起作用
-- 插入数据：当往副表插入主表不存在的数据时，外键起作用
-- 修改数据：当往副表修改主表不存在的数据时，外键起作用
-- 删除数据：当删除主表数据且副表中有关联此数据时，外键起作用

-- 有了外键之后，如何管理数据
-- 插入数据：先插入主表数据，再插入副表数据
-- 修改数据：先改主表再修改副表
-- 删除数据：先删除副表，再主表
-- 员工表（副表：被约束）
DROP TABLE employee;
CREATE TABLE employee(
	id INT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(20),
	depetId INT,
	CONSTRAINT employee_dept_fk FOREIGN KEY(depetId) REFERENCES dept(id)
	--          外键名称                    外键字段  参考     名称
);
-- 部门表（主表，约束）
CREATE TABLE dept(
	id INT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(20)
	
);
INSERT INTO dept(NAME) VALUES('软件开发部');
INSERT INTO dept(NAME) VALUES('软件维护部');
INSERT INTO employee(NAME,depetId) VALUES ('jac',1);
INSERT INTO employee(NAME,depetId) VALUES ('nacy',2);
INSERT INTO employee(NAME,depetId) VALUES ('lucy',1);
INSERT INTO employee(NAME,depetId) VALUES ('jacku',2);

-- 每次插入数据时，会出现数据冗余
-- 解决冗余的问题,设计一张独立的表，将冗余数据放入

-- 1.7 级联技术
-- 级联：当有了外键的时候，修改或删除主表数据，同时影响副表的数据，使用级联
CREATE TABLE employee(
	id INT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(20),
	depetId INT,
	-- 添加级联修改 on update cascade
	-- 级联删除 	on delete cascade
	-- 级联
	CONSTRAINT employee_dept_fk FOREIGN KEY(depetId) REFERENCES dept(id) ON UPDATE CASCADE
	--          外键名称                    外键字段  参考     名称      级联
);
-- 部门表（主表，约束）
CREATE TABLE dept(
	id INT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(20)	
);
SELECT * FROM employee;
SELECT * FROM dept;

-- 二、多表查询
TRUNCATE TABLE dept;
DELETE FROM dept;
TRUNCATE TABLE employee;

INSERT INTO dept(NAME) VALUES('软件开发部');
INSERT INTO dept(NAME) VALUES('软件维护部');
INSERT INTO dept(NAME) VALUES('秘书部');

INSERT INTO employee(NAME,depetId) VALUES ('张三',4);
INSERT INTO employee(NAME,depetId) VALUES ('李四',5);
INSERT INTO employee(NAME,depetId) VALUES ('王五',4);
INSERT INTO employee(NAME,depetId) VALUES ('陈留',5);

-- 1.1 交叉连接查询（笛卡尔乘积现象 4*3=12 没有足够的连接条件）
-- 需求：查询员工及其部门
SELECT employee.name,dept.name FROM employee,dept;

-- 多表查询的步骤：1、确定查询的表  2、确定查询那些字段  3、确定连接条件
-- 内连接效果：只有满足连接条件的数据才会显示出来
-- 1.2 内连接查询
SELECT e.name,d.name
	FROM employee AS e,dept AS d
	WHERE e.depetId=d.id;
	
-- 另一种语法
SELECT  e.name,d.name
	FROM employee e
	INNER JOIN dept d
	ON e.depetId=d.id;
	

-- 1.3 外链接
-- 需求：查询部门和部门的员工（部门全部显示）
-- 左外链接效果：左表的数据全部显示，右表的数据满足条件全部显示，不满足显示null
-- 预期结果
	-- 软件开发部 张三
	-- 软件开发部 王五
	-- 软件维护部 李四
	-- 软件维护部 柽柳
	-- 秘书部     null
SELECT d.name,e.name
	FROM dept d
	LEFT OUTER JOIN employee e
	ON d.id=e.depetId;
	
-- 右外链接
SELECT d.name,e.name
	FROM employee e
	RIGHT OUTER JOIN dept d
	ON d.id=e.depetId;
	
-- 1.4 自连接查询
ALTER TABLE employee ADD bossId INT;
-- 运行结果
	-- 张三  null
	-- 李四  张三
	-- 王五  李四
	-- 陈留  王五
SELECT e.name,b.name
	FROM employee e
	LEFT OUTER JOIN employee b
	ON e.bossId=b.id;
	
	
-- 三、mysql存储过程
-- 创建存储过程
-- 定义一个结束的符号
DELIMITER $
--                      形式参数
CREATE PROCEDURE pro_test()
BEGIN 
	SELECT * FROM employee;
END $

-- 调用存储过程
--           实际参数
CALL pro_test();

-- in:输入参数，可以携带数据到存储过程中
-- out:输出参数，可以携带数据到存储外面
-- inout:输入输出参数

-- 3.1 带有输入参数的存储过程
-- 需求：传入员工Id查询对应的员工
DELIMITER $
CREATE PROCEDURE pro_testByIn(IN eid INT) -- 参数类型 参数名称 数据类型
BEGIN
	SELECT * FROM employee WHERE id=eid;
END $

-- 调用
CALL pro_testByIn(1);

-- 3.2 带有输出参数的存储过程
DELIMITER $
CREATE PROCEDURE prot_testByOut(OUT n VARCHAR(20))
BEGIN
	-- 修改参数n
	SET n='输出参数';
END $

-- 接收存储过程的参数
-- 定义一个变量接收输出参数
-- MySQL数据库的三种变量
	-- 1、全局变量 MySQL内置的变量，在MySQL数据库关闭的时候全局变量才会消失
		-- 查看某个全局变量 select @@全局变量名
		-- 修改某个全局变量 set @@变量名=值
	-- 2、会话变量：只在某次登录的会话中有效，退出连接，失效
		-- 查看某个会话变量 select @全局变量名
		-- 修改某个会话变量 set @变量名=值
	-- 3、局部变量：在存储过程中的变量，存储过程结束局部变量失效
		-- 查看某个局部变量 select 全局变量名
		-- 修改某个局部变量 set 变量名=值
		-- 定义局部变量     declare 变量名 数据类型

-- 定义一个会话变量
SET @n='eric';
CALL prot_testByOut(@n);

-- 查看会话变量
SELECT @n;


-- 3.3 带有输入输出参数的存储过程
DELIMITER $
CREATE PROCEDURE pro_testByInOut(INOUT n VARCHAR(20))
BEGIN
	-- 查看n变量
	SELECT n;
	-- 修改n变量
	SET n='500';
END $

-- 定义一个会话变量
SET @n='100';
CALL pro_testByInOut(@n);

-- 查看n
SELECT @n;

-- 3.4 带有判断条件的存储过程
-- 需求：输入一个num整数，num=1,输出‘星期一’，num=2,输出‘星期二’，
DELIMITER $
CREATE PROCEDURE pro_testByIf(IN num INT,OUT str VARCHAR(20))
BEGIN
	IF num=1 THEN
		SET str ='星期一';
	ELSE IF num=2 THEN
		SET str='星期二';
	ELSE
		SET str='错误';
	END IF;
END $

CALL pro_testByIf(1,@str);
SELECT @str

-- 3.5 带有循环条件的存储过程
-- 需求：输入一个num 计算从1到num的总和
DELIMITER $
CREATE PROCEDURE pro_testByWhile(IN num INT,OUT score INT)
BEGIN
	-- 定义局部变量
	DECLARE i INT DEFAULT 1;
	DECLARE result INT DEFAULT 0;
	WHILE i<=num DO 
		SET result = result+i;
		SET i=i+1;
	END WHILE;
	SET score=result;
END $

CALL pro_testByWhile(100,@score);
SELECT @score;


-- 3.6 携带数据库的数据给输出参数
-- 需求：传入员工id，查询对应的员工，输出员工姓名
DELIMITER $
CREATE PROCEDURE peo_testByData(IN eid INT,OUT sname VARCHAR(20))
BEGIN
	SELECT NAME INTO sname FROM employee WHERE id=eid;

END $

CALL pro_testByData(1,@sname);
SELECT @sname;


-- 练习
在student表的数据基础上，设计一个存储过程

	1）计算出所有学生的平均分
	2）
		如果平均分，大于80分，且小于等于100分，输出优秀
		如果平均分，大于等于60分，且小于等于80分，输出‘良好’
		如果平均分，小于60分，输出‘不及格’
USE day15;		
SELECT * FROM student;

DELIMITER $
CREATE PROCEDURE pro_testByAvg(OUT str VARCHAR(20),OUT tavg FLOAT)
BEGIN
	DECLARE savg FLOAT DEFAULT 0.0;
	SELECT AVG(english) FROM student;
	IF savg>80 AND savg<=100 THEN
		SET str='优秀';
	ELSE IF savg>=60 AND savg<=80 THEN
		SET str='良好';
	ELSE 
		SET str='不及格';
	END IF;
	SET tavg=savg;
END $
CALL pro_testByAvg(@str,@tavg);
SELECT @str,@tavg;

-- 删除存储过程
DROP PROCEDURE pro_testByAvg;

-- 四、触发器
-- 员工日志表
CREATE TABLE emp_log(
	id INT PRIMARY KEY AUTO_INCREMENT,
	content VARCHAR(20)
);
-- 需求：当往员工表插入一条数据是，往员工日志插入一条数据
-- 创建增加触发器(行为前before 行为后after)
CREATE TRIGGER tri_empAdd AFTER INSERT ON employee FOR EACH ROW 
	INSERT INTO emp_log(content) VALUES('员工表被插入一条记录');

INSERT INTO employee(NAME,depetId,bossId) VALUES('jav',4,1);

-- 创建修改触发器(行为前before 行为后after)
CREATE TRIGGER tri_empUpd AFTER UPDATE ON employee FOR EACH ROW 
	INSERT INTO emp_log(content) VALUES('员工表被修改一条记录');

UPDATE employee SET NAME='李四' WHERE id=2;

-- 创建增加触发器(行为前before 行为后after)
CREATE TRIGGER tri_empDel AFTER DELETE ON employee FOR EACH ROW 
	INSERT INTO emp_log(content) VALUES('员工表被删除一条记录');
DELETE FROM employee WHERE id=10;
SELECT * FROM emp_log;
DROP TRIGGER triemp_Add;
SELECT * FROM employee;


-- 五、MySQL权限问题
-- root用户：超级管理员，增删改查
-- 给mysql数据库分配不同的权限的不同用户
SELECT * FROM USER;
-- mysql数据库：存放mysql配置信息，包括用户信息

-- 加密函数(md5算法-单向加密)
SELECT PASSWORD('root');
-- 修改用户密码
UPDATE USER SET PASSWORD=PASSWORD('123456') WHERE USER='root'
DELETE FROM USER WHERE USER='eric';
-- 分配权限给不同的用户
-- 需求：分配查询day15数据库的employee表的权限给eric用户，密码为123456
GRANT SELECT ON day15.employee TO 'eric'@'localhost' IDENTIFIED BY '123456';

-- 备份(登录前)
-- mysqldump -uroot -p 数据库名 >地址（e:/day15.sql） 

-- 恢复数据库
-- mysql -uroot -p 数据库名 <地址（e:/day15.sql）